# Special parser for Ignition Server logs 
parser p_kv { kv-parser(value_separator("=") prefix(".kv.") );};

# filter for Ignition Server Access logs (catId=10)
filter f_ignition_catId_10{ match("^catId=10" value("PROGRAM")); };

# destinstaion mysql
destination d_mysql_ide {
    sql(
        type(mysql)
        host("localhost") username("ilog") password("ilogpassword")
        database("ilog")
        table("ignition_catId_10")
        columns(
           "Id",
           "datetime",
           "host",
           "msgId",
           "ADDomainAsset",
           "AssignedAsset",
           "AuthServerName",
           "AuthenticationDecision",
           "AuthenticatorIpAddr",
           "AuthenticatorName",
           "AuthenticatorType",
           "AuthorizationDecision",
           "AuthorizationRuleIds",
           "CallingStationIdAttr",
           "CredentialValidationPolicy",
           "Description",
           "DeviceMAC",
           "DeviceOSType",
           "DeviceOSVersion",
           "DeviceSubtype",
           "DeviceType",
           "DirectoryServiceName",
           "EmbeddedAsset",
           "InnerIdentity",
           "LastAuthException",
           "LicenseGID",
           "LicenseOID",
           "NASIPAddrAttr",
           "NASPortAttr",
           "PostureProfileName",
           "PostureResult",
           "ProvisioningValues",
           "ResultCode",
           "ServiceCatName",
           "SubauthenticatorName",
           "TunnelProtocol",
           "UserNameAttr",
           "UserId"
        )
        values(
           "${.kv.Id}",
           "$R_YEAR-$R_MONTH-$R_DAY $R_HOUR:$R_MIN:$R_SEC",
           "$HOST",
           "${.kv.msgId}",
           "${.kv.ADDomainAsset}",
           "${.kv.AssignedAsset}",
           "${.kv.AuthServerName}",
           "${.kv.AuthenticationDecision}",
           "${.kv.AuthenticatorIpAddr}",
           "${.kv.AuthenticatorName}",
           "${.kv.AuthenticatorType}",
           "${.kv.AuthorizationDecision}",
           "${.kv.AuthorizationRuleIds}",
           "${.kv.Calling-Station-Id-Attr}",
           "${.kv.CredentialValidationPolicy}",
           "${.kv.Description}",
           "${.kv.DeviceMAC}",
           "${.kv.DeviceOSType}",
           "${.kv.DeviceOSVersion}",
           "${.kv.DeviceSubtype}",
           "${.kv.DeviceType}",
           "${.kv.DirectoryServiceName}",
           "${.kv.EmbeddedAsset}",
           "${.kv.InnerIdentity}",
           "${.kv.LastAuthException}",
           "${.kv.LicenseGID}",
           "${.kv.LicenseOID}",
           "${.kv.NAS-IPAddr-Attr}",
           "${.kv.NAS-Port-Attr}",
           "${.kv.PostureProfileName}",
           "${.kv.PostureResult}",
           "${.kv.ProvisioningValues}",
           "${.kv.ResultCode}",
           "${.kv.ServiceCatName}",
           "${.kv.SubauthenticatorName}",
           "${.kv.TunnelProtocol}",
           "${.kv.User-Name-Attr}",
           "${.kv.UserId}"
        )
        indexes("datetime", "host")
    );
};
log { source ( s_net ); filter( f_ignition_catId_10 ); parser(p_kv); destination ( d_mysql_ide ); };

# destination for Server logs
destination df_ignition { file("/opt/www/syslog/ignition.log" owner("stepcg") group("stepcg") perm(0644) template(t_filetemplate)); };

# log Ignition Server Access logs (catId=10) and stop
log { source ( s_net ); filter( f_ignition_catId_10 ); destination ( df_ignition ); flags(final);  };

# Send syslog messages to ilog database
destination d_ilog_syslog {
    sql(
        type(mysql)
        host("localhost") username("ilog") password("ilogpassword")
        database("ilog")
        table("syslog")
        columns("host", "sourceip", "facility", "priority", "level", "tag", "datetime", "program", "msg")
        values("$HOST", "$SOURCEIP", "$FACILITY", "$PRIORITY", "$LEVEL", "$TAG","$R_YEAR-$R_MONTH-$R_DAY $R_HOUR:$R_MIN:$R_SEC","$PROGRAM", "$MESSAGE")
        #values("$HOST", "$FACILITY", "$PRIORITY", "$LEVEL", "$TAG","$YEAR-$MONTH-$DAY $HOUR:$MIN:$SEC","$PROGRAM", "$MSG")
        indexes("datetime", "host", "sourceip" "program", "pid", "message")
    );
};

# send syslog messages to mysql
log { source ( s_net ); destination ( d_ilog_syslog ); };

# log all other Ignition logs messages and stop
filter f_ignition { match("^catId=" value("PROGRAM")); };
log { source ( s_net ); filter( f_ignition ); destination ( df_ignition ); flags(final);  };
